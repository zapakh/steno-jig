{
TypeJig.WordSets.pronouns = [
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that",
    "I", "we", "you", "he", "she", "it", "they", "that"
]

let pronouns_sing = ["he", "she", "it", "that", "who"]

let pronouns_pl = ["I", "we", "you", "they", "that", "who"]

let pronouns = ["I", "we", "you", "he", "she", "it", "they", "that", "who"]

let conjugates = [
    "I do",
    "we do",
    "you do",
    "he does",
    "she does",
    "it does",
    "they do",
    "that does",
    "who does"
]

let pronounshave = [
    "I have",
    "we have",
    "you have",
    "he has",
    "she has",
    "it has",
    "they have",
    "that has",
    "that have",
    "who has",
    "who have"
]

let modes = ["did", "can", "could", "will", "would", "may", "might", "must"]

let negmodes = ["did", "can", "could", "will", "would", "may", "might", "must",
                "didn't", "can't", "couldn't", "won't", "wouldn't", "mustn't",
                "did not", "can not", "could not", "will not", "would not",
                "may not", "might not", "must not"]

let verbs_pl = ["know", "care", "expect", "think", "give", "want", "need",
                "get", "believe", "find", "have", "feel", "work",
                "understand", "remember", "go", "come", "imagine", "mean"]

let verbs = verbs_pl

let verbs_sing = ["knows", "cares", "expects", "thinks", "gives", "wants", "needs",
                  "gets", "believes", "finds", "has", "feels", "works",
                  "understands", "remembers", "goes", "comes", "imagines", "means"]

let verbs_tails = [
"know the",
"know it",
"know if",
"know this",
"know about",
"know what",
"know that",
"know as",
"care to",
"care if",
"care about",
"care what",
"care that",
"care for",
"expect to",
"think the",
"think so",
"think it",
"think of",
"think this",
"think about",
"think what",
"think that",
"think as",
"give the",
"give up",
"give it",
"give to",
"give this",
"give in",
"give away",
"give that",
"give a",
"want the",
"want some",
"want it",
"want to",
"want this",
"want any",
"want what",
"want that",
"want a",
"need the",
"need some",
"need it",
"need to",
"need this",
"need any",
"need what",
"need that",
"need a",
"get the",
"get some",
"get it",
"get to",
"get this",
"get any",
"get what",
"get that",
"get a",
"believe the",
"believe so",
"believe it",
"believe me",
"believe this",
"believe in",
"believe what",
"believe that",
"find the",
"find some",
"find it",
"find out",
"find this",
"find any",
"find what",
"find that",
"find a",
"have the",
"have some",
"have it",
"have to",
"have this",
"have any",
"have what",
"have that",
"have a",
"feel the",
"feel some",
"feel it",
"feel like",
"feel this",
"feel any",
"feel what",
"feel that",
"feel a",
"work out",
"work it",
"work to",
"work with",
"work on",
"work together",
"work as",
"understand the",
"understand it",
"understand why",
"understand this",
"understand how",
"understand what",
"understand that",
"understand a",
"remember the",
"remember it",
"remember when",
"remember this",
"remember how",
"remember what",
"remember that",
"remember a",
"go out",
"go to",
"go for",
"go back",
"go through",
"go away",
"go home",
"go ahead",
"come out",
"come to",
"come from",
"come back",
"come through",
"come away",
"come home",
"come around",
"imagine the",
"imagine it",
"imagine why",
"imagine this",
"imagine how",
"imagine what",
"imagine that",
"imagine a",
"mean the",
"mean it",
"mean to",
"mean this",
"mean by",
"mean what",
"mean that",
"mean a",
"make the",
"make some",
"make it",
"make that",
"make this",
"make any",
"make what",
"make sense",
"make a",
"take the",
"take some",
"take it",
"take over",
"take this",
"take any",
"take what",
"take that",
"take a"
]

let verbs_tails_pl = verbs_tails

let verbs_tails_sing = [
"knows the",
"knows it",
"knows if",
"knows this",
"knows about",
"knows what",
"knows that",
"knows as",
"cares to",
"cares if",
"cares about",
"cares what",
"cares that",
"cares for",
"expects to",
"thinks the",
"thinks so",
"thinks it",
"thinks of",
"thinks this",
"thinks about",
"thinks what",
"thinks that",
"thinks as",
"gives the",
"gives up",
"gives it",
"gives to",
"gives this",
"gives in",
"gives away",
"gives that",
"gives a",
"wants the",
"wants some",
"wants it",
"wants to",
"wants this",
"wants any",
"wants what",
"wants that",
"wants a",
"needs the",
"needs some",
"needs it",
"needs to",
"needs this",
"needs any",
"needs what",
"needs that",
"needs a",
"gets the",
"gets some",
"gets it",
"gets to",
"gets this",
"gets any",
"gets what",
"gets that",
"gets a",
"believes the",
"believes so",
"believes it",
"believes me",
"believes this",
"believes in",
"believes what",
"believes that",
"finds the",
"finds some",
"finds it",
"finds out",
"finds this",
"finds any",
"finds what",
"finds that",
"finds a",
"has the",
"has some",
"has it",
"has to",
"has this",
"has any",
"has what",
"has that",
"has a",
"feels the",
"feels some",
"feels it",
"feels like",
"feels this",
"feels any",
"feels what",
"feels that",
"feels a",
"works out",
"works it",
"works to",
"works with",
"works on",
"works together",
"works as",
"understands the",
"understands it",
"understands why",
"understands this",
"understands how",
"understands what",
"understands that",
"understands a",
"remembers the",
"remembers it",
"remembers when",
"remembers this",
"remembers how",
"remembers what",
"remembers that",
"remembers a",
"goes out",
"goes to",
"goes for",
"goes back",
"goes through",
"goes away",
"goes home",
"goes ahead",
"comes out",
"comes to",
"comes from",
"comes back",
"comes through",
"comes away",
"comes home",
"comes around",
"imagines the",
"imagines it",
"imagines why",
"imagines this",
"imagines how",
"imagines what",
"imagines that",
"imagines a",
"means the",
"means it",
"means to",
"means this",
"means by",
"means what",
"means that",
"means a",
"makes the",
"makes some",
"makes it",
"makes that",
"makes this",
"makes any",
"makes what",
"makes sense",
"makes a",
"takes the",
"takes some",
"takes it",
"takes over",
"takes this",
"takes any",
"takes what",
"takes that",
"takes a"
]

let pastverbs = ["knew", "cared", "expected", "thought", "gave", "wanted", "needed",
                 "got", "believed", "found", "had", "felt", "worked",
                 "understood", "remembered", "went", "came", "imagined", "meant"]

let participleverbs = ["known", "cared", "expected", "thought", "given", "wanted", "needed",
                       "gotten", "believed", "found", "had", "felt", "worked",
                       "understood", "remembered", "gone", "come", "imagined", "meant"]

TypeJig.WordSets.modesNeg = negmodes

TypeJig.WordSets.promodes = []
pronouns.forEach(pronoun =>
  modes.forEach(mode =>
    TypeJig.WordSets.promodes.push(pronoun + " " + mode)))

TypeJig.WordSets.promodesNeg = []
pronouns.forEach(pronoun =>
  negmodes.forEach(mode =>
    TypeJig.WordSets.promodesNeg.push(pronoun + " " + mode)))

TypeJig.WordSets.proverbs = []
pronouns_sing.forEach(pronoun =>
  verbs_sing.forEach(verb =>
    TypeJig.WordSets.proverbs.push(pronoun + " " + verb)))
pronouns_pl.forEach(pronoun =>
  verbs_pl.forEach(verb =>
    TypeJig.WordSets.proverbs.push(pronoun + " " + verb)))

TypeJig.WordSets.proverbstails = ["nope"]
pronouns_sing.forEach(pronoun =>
  verbs_tails_sing.forEach(verb =>
    TypeJig.WordSets.proverbstails.push(pronoun + " " + verb)))
pronouns_pl.forEach(pronoun =>
  verbs_tails_pl.forEach(verb =>
    TypeJig.WordSets.proverbstails.push(pronoun + " " + verb)))

TypeJig.WordSets.proverbstailsneg = ["nope"]
pronouns_sing.forEach(pronoun =>
  verbs_tails_sing.forEach(verb =>
    TypeJig.WordSets.proverbstailsneg.push(pronoun + " " + verb)))
pronouns_sing.forEach(pronoun =>
  verbs_tails.forEach(verb =>
    TypeJig.WordSets.proverbstailsneg.push(pronoun + " doesn't " + verb)))
pronouns_pl.forEach(pronoun =>
  verbs_tails_pl.forEach(verb => {
    TypeJig.WordSets.proverbstailsneg.push(pronoun + " " + verb)
    TypeJig.WordSets.proverbstailsneg.push(pronoun + " don't " + verb)}))


TypeJig.WordSets.fullphrases = []
pronouns.forEach(pronoun =>
  negmodes.forEach(mode =>
    verbs_tails.forEach(verb =>
      TypeJig.WordSets.fullphrases.push(pronoun + " " + mode + " " + verb))))
}
